let mapleader ='\'
" PLUG
if ! filereadable(expand('~/.config/nvim/autoload/plug.vim'))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ~/.config/nvim/autoload/
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.config/nvim/autoload/plug.vim
endif

" PLUGINS
call plug#begin('~/.config/nvim/plugged')
"Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'morhetz/gruvbox'
call plug#end()

" BASICS
	set nocompatible
	filetype plugin on
	syntax on
	syntax enable
	set ts=4 sts=4 sw=4 noexpandtab
	set number relativenumber
	set nobackup
	set nowritebackup
	set hidden
	set mouse=a
	set cmdheight=2
	set updatetime=300
	set shortmess=ac
	set signcolumn=yes
	set encoding=utf-8
	set splitbelow splitright
	set showtabline=0
	set nohlsearch
	set clipboard+=unnamedplus
	"set foldmethod=indent
	set nofoldenable

" Ensure files are read as what I want:
	let g:vimwiki_ext2syntax = {'Rmd': 'markdown', 'rmd': 'markdown','md': 'markdown', 'markdown': 'markdown', 'mdown': 'markdown'}

	" Function that compiles and runs most programs
	function! Auto_run()
		split
		if expand("%:e") == "py" 
			terminal python %
			startinsert
		elseif expand("%:e") == "c"
			terminal gcc -o "%<" "%:t" && ./"%<"
			startinsert
		elseif expand("%:e") == "cpp"
			terminal g++ -o "%<" "%:t" && ./"%<"
			startinsert
		elseif expand("%:t") == "config.h"
			terminal sudo make clean install
			startinsert
		elseif expand("%:t") == "wal_dunst"
			!wal_dunst
			!notify-send --urgency=low test
			:q
		elseif expand("%:t") == "colors-wal-dwm.h"
			!wal -i ~/Images/Wallpapers/dragon.jpg
			!wait
			!sudo build_dwm
"		elseif (g:vimwiki_ext2syntax[expand("%:e")] == "markdown")
"			terminal cd %:h && echo "require(rmarkdown); render('%:t')" | R --vanilla && if [ ! "$(pidof zathura)" ]; then eval "zathura %<.pdf"; fi
"			:CtrlSpaceGoDown
"			:q
"This kinda bloat
		elseif expand("%:e") == "Rmd"
			RMarkdown pdf
			terminal cd %:h && if[ ! "$(pidof zathira)" ]; then eval "zathura %<.pdf"; fi
			:CtrlSpaceGoDown
			:q
		elseif (matchstr(expand("%:p"), "Workshop-Introduction-Python-3/presentation/separate_slide") != '')
			terminal /home/jm/Documents/OneDrive/FEUP/IEEE/Workshops/Python/Workshop-Introduction-Python-3/presentation/aux_files/generatePresentation.sh && wait && xdotool windowactivate $(xdotool search --name "Mozilla Firefox"); xdotool key F5; xdotool windowactivate $(xdotool getwindowfocus)
			:CtrlSpaceGoDown
			:q
		endif
	endfunction
	nmap <F5> :call Auto_run()<cr>

	function! Compile_Cmake()
		split
		:CMakeClean
		terminal cmake .. .; cmake --build . && ./FEUP-AEDA-Proj1
		startinsert
	endfunction

	nmap <F6> :call Compile_Cmake()<cr>


	" Save File
	noremap <F1> :retab! <cr>

	" Disables automatic commenting on newline
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

	" Automatically deletes all trailing whitespace on save.
	nnoremap <silent> <F4> :call <SID>StripTrailingWhitespaces()<CR>
	autocmd BufWritePre *.py,*.c,*.cpp,*.h,*.txt :call <SID>StripTrailingWhitespaces()
	function! <SID>StripTrailingWhitespaces()
		" Preparation: save last search, and cursor position.
		let _s=@/
		let l = line(".")
		let c = col(".")
		" Do the business:
		%s/\s\+$//e
		" Clean up: restore previous search history, and cursor position
		let @/=_s
		call cursor(l, c)
	endfunction


" THEME
	colorscheme gruvbox


" COC
	" Make <tab> used for trigger completion, completion confirm, snippet expand and jump like VSCode
	" in neovim <0.4 needs suggest.noselect": false, in :CocConfig
	"inoremap <silent><expr> <TAB>
	"	\ pumvisible() ? coc#_select_confirm() :
	"	\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
	"	\ "<TAB>"
	"let g:coc_snippet_next = 

	" use <tab> for trigger completion and navigate to the next complete item
	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~ '\s'
	endfunction Use tab for trigger completion with characters ahead and navigate.
	" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
	inoremap <silent><expr> <TAB>
		  \ pumvisible() ? "\<C-n>" :
		  \ <SID>check_back_space() ? "\<TAB>" :
		  \ coc#refresh()
	inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"'<tab>'

	" Use <c-space> to trigger completion.
	inoremap <silent><expr> <c-space> coc#refresh()" Use <C-k> for jump to previous placeholder

	" Close the preview window when completion is done
	autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

	" Use `[g` and `]g` to navigate diagnostics
	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)

	" Remap keys for gotos
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	" Use K to show documentation in preview window
	nnoremap <silent> K :call <SID>show_documentation()<CR>
	function! s:show_documentation()
		if (index(['vim','help'], &filetype) >= 0)
		 execute 'h '.expand('<cword>')
		 else
		 call CocAction('doHover')
		 endif
	endfunction

	" Highlight symbol under cursor on CursorHold
	autocmd CursorHold * silent call CocActionAsync('highlight')
	" Complete suggestion using enter
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
	" Remap for rename current word
	nmap <leader>rn <Plug>(coc-rename)

	" Prettier on save
	command! -nargs=0 Prettier :CocCommand prettier.formatFile

	let g:coc_global_extensions = [
	\ 'coc-calc',
	\ 'coc-eslint',
	\ 'coc-java',
	\ 'coc-json',
	\ 'coc-lists',
	\ 'coc-markdownlint',
	\ 'coc-pairs',
	\ 'coc-prettier',
	\ 'coc-python',
	\ 'coc-sh',
	\ 'coc-snippets',
	\ 'coc-tsserver',
	\ ]

" SPELL-CHECK
	map <leader>o :setlocal spell! spelllang=en_us<CR>

" CTRLSPACE
	let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
	let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
	let g:CtrlSpaceSaveWorkspaceOnExit = 1
	let g:CtrlSpaceDefaultMappingKey = "<C-space> "
	nnoremap <silent><C-p> :CtrlSpace O<CR>
	let g:CtrlSpaceCacheDir = expand("$HOME/.config/nvim/")
	let g:CtrlSpaceUseUnicode = 0
	let g:CtrlSpaceUseTabline = 1
	let g:CtrlSpaceUseArrowsInTerm = 1
	let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
	let g:CtrlSpaceLoadLastWorkspaceOnStart = 1

	map <leader>T :enew<cr>
	map <leader>h :CtrlSpaceGoUp<CR>
	map <leader>l :CtrlSpaceGoDown<CR>
	map <C-h> :CtrlSpaceGoUp<CR>
	map <C-l> :CtrlSpaceGoDown<CR>
	map <leader>bq :bp <BAR> bd #<CR>
	map <leader>bs :ls<CR>
	map <leader>s :CtrlSpaceSaveWorkspace<CR>
	if executable("ag")
	    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
	endif

"Scroll
map <C-j> <C-f>
map <C-k> <C-b>
vnoremap <C-c> "*Y :let @+=@* <CR>
inoremap <C-s> <esc>:w<cr>

"Ctrl w deletes word
noremap <C-BS> <C-w>
